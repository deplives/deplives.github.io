<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitLab 自动部署 GitHub Pages 博客</title>
    <url>/post/4a4b01f0.html</url>
    <content><![CDATA[<p>在之前《<a href="/post/8d4f8799.html" title="搭建家庭私人 GitLab 服务器">搭建家庭私人 GitLab 服务器</a>》说到我现在有这样的需求，而且根据上一篇，我们已经搭建好了这样的一个环境。那么有什么就赶紧用起来吧。</p>
<span id="more"></span>
<p>那么这一篇主要是介绍一下如何用这个家庭私人 GitLab 实现自动部署托管在 GitHub Pages 上的博客。本文使用的是 <code>Hexo</code> 框架 + <code>Next</code> 主题，其他的静态博客框架大同小异。这的关注点不在搭建博客，这里假定你已经有了一个正在托管的 GitHub Pages 博客。这篇文章将此博客为例子讲解一下。</p>
<h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1><p>用过 <code>Hexo</code> 的都知道，它需要在你的本地电脑上搭建一个 <code>Node</code> 环境。安装框架、自定义修改配置、Markdown 写文章，然后生成、最后利用 Git 推送到 GitHub 仓库 然后才能在网上看到发布的文章。那么这样带来了一个问题：如果某一天你本地的写博客的环境丢失了（比如电脑坏了，硬盘坏了等等等等）那么如果你想再更新你的博客就需要再次搭建这样一个环境，除了需要将所有的配置再次配置一遍，关键是旧的 Markdown 文章已经几乎再找不回来了。</p>
<p>几年前我也是因为这个原因导致放弃了之前写了很多文章的博客。那到这里就有人想了，如果我把位于本地的那个 ‘环境’ 也用 Git 管理起来呢？不错的想法，之后我也是这样做的，在 GitHub 上再新建一个仓库，用来保存本地写博客的环境，这样一来，即使换电脑了，只需要把这个仓库 clone 下来，安装一下相关的依赖，就可以继续了。</p>
<p>看起来很美好，但很快就遇到另一个问题：这里相当于把你的博客所有源码都公开了出去，有什么弊端么？比如假如你使用了 <code>hexo-blog-encrypt</code> 插件对某些博客进行加密，密码使需要明文写在待加密博客的头部信息里的。好家伙，这样一来，不就成了防君子不防小人了？所以这就需要把源码托管在我们之前搭建那个家庭私人的 GitLab 上的。</p>
<p>但是过了一段时间，我又双叒叕发现了一个问题：我经常忘记把本地的博客源码 push 到 GitLab 上。大部分的时候都是本地写完，修改的差不多之后就 <code>hexo deploy</code> 部署后就忘了 push 到 GitLab，导致用的时候该丢的文章还是丢了。恼羞成怒之下，萌生了利用 GitLab CI&#x2F;CD 自动部署。实现每次写完文章，只需要 push 本地源码到 GitLab，然后 GitLab 自动部署。这样一来就不怕每次写完文章手动部署之后忘记提交本地源码，二来也减少了需要手动的步骤。毕竟懒惰才是人类的第一生产力。</p>
<h1 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h1><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>使用 GitLab CI&#x2F;CD 功能不是必须 Docker，但是容器化的 Docker 能够隔离物理机，防止一言不合一个 <code>rm -rf /*</code> 让你的心血白费。</p>
<p>以下命令需要 ssh 到 GitLab 服务所在的机器中进行</p>
<ol>
<li>卸载旧版本 Docker（如果没安装过，可以省略） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li>
<li>安装必要依赖 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure></li>
<li>添加 apt 源 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">echo \</span><br><span class="line"> &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta"> $</span><span class="bash">(lsb_release -cs) stable<span class="string">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br></pre></td></tr></table></figure></li>
<li>安装 Docker <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li>
<li>启动 Docker <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果以上命令没有出现错误，那么 docker 就已经安装到服务器上了。如果不放心，可以通过 <code>sudo docker -v</code> 命令，如果输出类似 <code>Docker version 20.10.12, build e91ed57</code> 就说明 docker 已经正确安装了。</p>
<h2 id="安装-Gitlab-Runner"><a href="#安装-Gitlab-Runner" class="headerlink" title="安装 Gitlab-Runner"></a>安装 Gitlab-Runner</h2><p>以下的命令都需要 ssh 到 GitLab 服务所在的机器中进行</p>
<ol>
<li>添加 gitlab-runner 库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot; | sudo bash</span><br></pre></td></tr></table></figure></li>
<li>安装 gitlab-runner <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gitlab-runner</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果一切顺利，gitlab-runner 就安装好了，可以运行 <code>sudo gitlab-runner -v</code> 如果没有错误，则说明 gitlab-runner 安装成功。</p>
<h2 id="注册-Runner"><a href="#注册-Runner" class="headerlink" title="注册 Runner"></a>注册 Runner</h2><p>首先使用 <code>root</code> 用户登录 gitlab -&gt; 点击左上方 <code>Menu</code> -&gt; 进入 <code>Admin</code> -&gt; 点击左侧面板 <code>Overview</code> 下的 <code>Runners</code></p>
<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/GitLab-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Pages-%E5%8D%9A%E5%AE%A2/GitLab-Admin-Runners.png" class="" width="110" height="304">

<p>然后点击右上方 Register an instance runner，复制 Registration token</p>
<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/GitLab-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Pages-%E5%8D%9A%E5%AE%A2/GitLab-Admin-Runners-Register.png" class="" width="243" height="184">

<p>再次通过 ssh 连接 GitLab 服务器注册一个共享 Runner</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo gitlab-runner register</span></span><br><span class="line">Enter the GitLab instance URL (for example, https://gitlab.com/):</span><br><span class="line">http://git.home/            # 本地 GitLab 域名或者IP</span><br><span class="line">Enter the registration token:</span><br><span class="line">xxxxxxxxxxxxxxxx            # 上面获取到的 token</span><br><span class="line">Enter a description for the runner:</span><br><span class="line">[ubuntu]: node              # runner 自定一个名字</span><br><span class="line">Enter tags for the runner (comma-separated):</span><br><span class="line">node                        # runner tag 的名字，通过 tag 指定运行 runner</span><br><span class="line">Registering runner... succeeded                     runner=xxxxxx</span><br><span class="line">Enter an executor: custom, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh, parallels, shell, virtualbox, docker+machine:</span><br><span class="line">docker                      # 这里选择 docker</span><br><span class="line">Enter the default Docker image (for example, ruby:2.6):</span><br><span class="line">node:17                     # docker 镜像以及版本</span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&#x27;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>

<p>当创建好 Runner 之后，再次回到 <code>Runners</code> 页面刷新就可以显示刚刚创建的 Runner 了。</p>
<h2 id="创建-SSH-密钥对"><a href="#创建-SSH-密钥对" class="headerlink" title="创建 SSH 密钥对"></a>创建 SSH 密钥对</h2><p>在本地或者服务器上执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f blog -t rsa -b 2048 -C &quot;xxxx@xxx.xxx&quot;     # 邮箱自行替换</span><br></pre></td></tr></table></figure>
<p>生成一个无密码的 SSH 的密钥对</p>
<p>公钥为 <code>blog.pub</code>，私钥为 <code>blog</code></p>
<h2 id="GitHub-添加-Deploy-keys"><a href="#GitHub-添加-Deploy-keys" class="headerlink" title="GitHub 添加 Deploy keys"></a>GitHub 添加 Deploy keys</h2><p>登录 GitHub，进入部署的博客仓库，点击 <code>Settings</code> -&gt; <code>Deploy keys</code> -&gt; <code>Add deploy key</code></p>
<p>将 <code>blog.pub</code> 公钥的内容全部复制到 <code>Key</code> 中，然后 <code>Title</code> 处自定义一个名字</p>
<h2 id="GitLab-配置-CI-x2F-CD"><a href="#GitLab-配置-CI-x2F-CD" class="headerlink" title="GitLab 配置 CI&#x2F;CD"></a>GitLab 配置 CI&#x2F;CD</h2><p>进入 GitLab 博客项目，点击 <code>Settings</code> 下的 <code>CI/CD</code>，右侧展开 <code>Runners</code> 选项卡，右侧 <code>Shared runners</code> 打开 <code>Enable shared runners for this project</code> 选项</p>
<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/GitLab-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Pages-%E5%8D%9A%E5%AE%A2/GitLab-CICD-Settings-Runners.png" class="" width="795" height="413">

<p>然后再展开到下方 <code>Variables</code> </p>
<p>添加两个环境变量分别是</p>
<ul>
<li><code>SSH_KNOWN_HOSTS</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=</span><br></pre></td></tr></table></figure></li>
<li><code>SSH_PRIVATE_KEY</code><br> <a href="#%E5%88%9B%E5%BB%BA-SSH-%E5%AF%86%E9%92%A5%E5%AF%B9">创建 SSH 密钥对</a> 中的私钥 <code>blog</code> 内容<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/GitLab-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Pages-%E5%8D%9A%E5%AE%A2/GitLab-CICD-Settings-Variables.png" class="" width="853" height="343"></li>
</ul>
<h2 id="项目-gitlab-ci-yml-配置"><a href="#项目-gitlab-ci-yml-配置" class="headerlink" title="项目 .gitlab-ci.yml 配置"></a>项目 <code>.gitlab-ci.yml</code> 配置</h2><p>经过以上配置，现在离成功有一步之遥。</p>
<p>在 GitLab 博客源码项目根目录下创建一个 <code>.gitlab-ci.yml</code> 的配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span>              <span class="comment"># 指定只有主分支触发该 CI</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span>              <span class="comment"># 此处 tag 指定创建 GitLab Runner 时候填写 tag 名字</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ln</span> <span class="string">-sf</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai</span> <span class="string">/etc/localtime</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent</span> <span class="string">-s)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$SSH_PRIVATE_KEY&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$SSH_KNOWN_HOSTS&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh/*</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;xxxx@xxx.xxx&quot;</span>             <span class="comment"># GitHub 的邮箱</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;xxxx&quot;</span>                      <span class="comment"># GitHub 的名字</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">init.defaultBranch</span> <span class="string">main</span>               <span class="comment"># GitHub 项目的主分支 main 或者 master   </span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-swig</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-searchdb</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-symbols-count-time</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-sitemap</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-abbrlink</span> <span class="string">--save</span>                          <span class="comment"># 以上 npm 步骤根据自己添加的插件自定义</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>
<p>然后 <code>git add .gitlab-ci.yml</code> 最后推送到仓库之后，从侧边 <code>CI/CD</code> 下 <code>Pipelines</code> 就可以看到自动运行部署工作了</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>经过以上的步骤，现在就可以每次在本地编辑后，只需要推送到 GitLab 并稍等片刻，GitHub Pages 的页面就有最新的内容了。</p>
]]></content>
  </entry>
  <entry>
    <title>OpenWrt 配置记录</title>
    <url>/post/465f36a1.html</url>
    <content><![CDATA[<p>这里会增量记录 OpenWrt 相关的一些技巧或者配置方法。</p>
<span id="more"></span>

<h1 id="内网设备直接访问光猫"><a href="#内网设备直接访问光猫" class="headerlink" title="内网设备直接访问光猫"></a>内网设备直接访问光猫</h1><p>在光猫桥接的情况下，一般 OpenWrt 和光猫的因为不在一个网段下，所以 OpenWrt 分配的 IP 并不能直接访问光猫。但是通过对 OpenWrt 防火墙进行相关的的配置可以实现访问光猫</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>OpenWrt WAN 口: eth0</li>
<li>光猫IP: 192.168.1.1</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>登录 OpenWrt 后台。在 <code>网络</code> -&gt; <code>防火墙</code> -&gt; <code>自定义规则</code> 下添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.1.10 netmask 255.255.255.0 broadcast 192.168.1.255</span><br><span class="line">iptables -I forwarding_rule -d 192.168.1.1 -j ACCEPT</span><br><span class="line">iptables -t nat -I postrouting_rule -d 192.168.1.1 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p>解释一下:</p>
<ol>
<li>第一行 <code>eth0</code> 是 OpenWrt WAN 口</li>
<li>第一行 <code>192.168.1.10</code> 是手动分配给 <code>eth0</code> 一个光猫所在网段的 IP，可以时其他的地址，只要不和当前光猫网段下 IP 冲突就行</li>
<li>第二行和第三行 <code>192.168.1.1</code> 是光猫的 IP 地址</li>
</ol>
<p>然后重启 OpenWrt，此时内网设备就可以通过浏览器访问 <code>192.168.1.1</code> 登录光猫后台了。</p>
<h1 id="开启-Dnsmasq-日志"><a href="#开启-Dnsmasq-日志" class="headerlink" title="开启 Dnsmasq 日志"></a>开启 Dnsmasq 日志</h1><p>编辑 <code>dnsmasq</code> 配置 <code>/etc/dnsmasq.conf</code> 文件</p>
<p>添加以下内容</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span>-queries</span><br><span class="line"><span class="built_in">log</span>-facility=/tmp/dnsmasq.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>重启 dnsmasq 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/dnsmasq restart</span><br></pre></td></tr></table></figure>

<p>添加日志解析器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">tail -f -n 1 /tmp/dnsmasq.log</span><br></pre></td></tr></table></figure>

<h1 id="系统日志中屏蔽-crontab-相关日志"><a href="#系统日志中屏蔽-crontab-相关日志" class="headerlink" title="系统日志中屏蔽 crontab 相关日志"></a>系统日志中屏蔽 crontab 相关日志</h1><p>编辑系统配置 <code>/etc/config/system</code></p>
<p>在 <code>system</code> 段中修改相关配置为以下内容</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> cronloglevel <span class="string">&#x27;4&#x27;</span></span><br><span class="line"><span class="keyword">option</span> conloglevel <span class="string">&#x27;9&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后重启 crontab 服务即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/cron restart</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>macOS GPG 使用指南</title>
    <url>/post/cb9ee24d.html</url>
    <content><![CDATA[<p>这篇指南面向的是对 <code>GPG</code> 有了一定基础的朋友，如果你还不知道 <code>GPG</code> 是什么，那么可能需要先补充一下这部分的基础知识，再来食用该指南。<br>如果你已经大概了解 <code>GPG</code> 的一些内容，知道它能用来干什么而且你真的需要用到。那么这篇指南或许对你有一点的帮助。<br>这篇指南主要针对于 <code>macOS</code> 系统下的 <code>GPG</code> 使用方法，如果你使用的是 <code>Windows</code> 或者 <code>Linux</code>，其中有些内容可能并不适用。<br>文中使用的 <code>GPG</code> 版本是 <code>2.4.1</code> 版本信息如下</p>
<span id="more"></span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg (GnuPG) 2.4.1</span><br><span class="line">libgcrypt 1.10.2</span><br><span class="line">Copyright (C) 2023 g10 Code GmbH</span><br><span class="line">License GNU GPL-3.0-or-later &lt;https://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Home: /Users/zebedy/.gnupg</span><br><span class="line">支持的算法：</span><br><span class="line">公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class="line">密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,</span><br><span class="line">    CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class="line">散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class="line">压缩：  不压缩, ZIP, ZLIB, BZIP2</span><br></pre></td></tr></table></figure>

<h1 id="生成主密钥"><a href="#生成主密钥" class="headerlink" title="生成主密钥"></a>生成主密钥</h1><p>在一般的情况下，我们使用 <code>--gen-key</code> 来生成一个密钥对，但是这个是一个简便方法。<br>这里我们需要更多的细节设置，所以用 <code>--full-gen-key</code> 来代替。选择密钥类型使用默认 <code>ECC（签名和加密）</code> 即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --full-gen-key</span></span><br><span class="line">gpg (GnuPG) 2.4.1; Copyright (C) 2023 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">请选择您要使用的密钥类型：</span><br><span class="line">   (1) RSA 和 RSA</span><br><span class="line">   (2) DSA 和 Elgamal</span><br><span class="line">   (3) DSA（仅用于签名）</span><br><span class="line">   (4) RSA（仅用于签名）</span><br><span class="line">   (9) ECC（签名和加密） *默认*</span><br><span class="line">  (10) ECC（仅用于签名）</span><br><span class="line"> （14）卡中现有密钥</span><br><span class="line">您的选择是？ 9</span><br></pre></td></tr></table></figure>

<p>然后选择椭圆曲线，这里选择默认 <code>Curve 25519</code> 即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">请选择您想要使用的椭圆曲线：</span><br><span class="line">   (1) Curve 25519 *默认*</span><br><span class="line">   (4) NIST P-384</span><br><span class="line">   (6) Brainpool P-256</span><br><span class="line">您的选择是？ 1</span><br></pre></td></tr></table></figure>

<p>然后设置有限期限，因为是个人使用的主密钥，所以无限期较为方便。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">请设定这个密钥的有效期限。</span><br><span class="line">         0 = 密钥永不过期</span><br><span class="line">      &lt;n&gt;  = 密钥在 n 天后过期</span><br><span class="line">      &lt;n&gt;w = 密钥在 n 周后过期</span><br><span class="line">      &lt;n&gt;m = 密钥在 n 月后过期</span><br><span class="line">      &lt;n&gt;y = 密钥在 n 年后过期</span><br><span class="line">密钥的有效期限是？(0) 0</span><br></pre></td></tr></table></figure>

<p>然后根据提示确定以上内容后就开始输入个人信息了<br>其中电子邮件地址建议填写自己常用的真实的电子邮件，即使填写一个假的是没有问题的（比如例子里面）<br>然后输入 <code>O</code> 确定内容或者根据提示输入特定返回修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GnuPG 需要构建用户标识以辨认您的密钥。</span><br><span class="line"></span><br><span class="line">真实姓名： zebedy</span><br><span class="line">电子邮件地址： example@gmail.com</span><br><span class="line">注释： 主密钥</span><br><span class="line">您正在使用‘utf-8’字符集。</span><br><span class="line">您选定了此用户标识：</span><br><span class="line">    “zebedy (主密钥) &lt;example@gmail.com&gt;”</span><br><span class="line"></span><br><span class="line">更改姓名（N）、注释（C）、电子邮件地址（E）或确定（O）/退出（Q）？ O</span><br></pre></td></tr></table></figure>

<p>确定之后根据提示设置主密钥的密码，经过短暂的时间就可以生成一个密钥了。<br>这个密码一定要妥善保管，会经常需要使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘</span><br><span class="line">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数</span><br><span class="line">发生器有更好的机会获得足够的熵。</span><br><span class="line">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘</span><br><span class="line">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数</span><br><span class="line">发生器有更好的机会获得足够的熵。</span><br><span class="line">gpg: 吊销证书已被存储为‘/Users/zebedy/.gnupg/openpgp-revocs.d/45275575D4E6F8A077851C9EB8A51B592369E537.rev’</span><br><span class="line">公钥和私钥已经生成并被签名。</span><br><span class="line"></span><br><span class="line">pub   ed25519 2023-05-10 [SC]</span><br><span class="line">      45275575D4E6F8A077851C9EB8A51B592369E537</span><br><span class="line">uid                      zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line">sub   cv25519 2023-05-10 [E]</span><br></pre></td></tr></table></figure>

<p>到这里，生成密钥的过程已经结束。</p>
<h1 id="配置子密钥"><a href="#配置子密钥" class="headerlink" title="配置子密钥"></a>配置子密钥</h1><p>在配置子密钥之前，首先需要做一个事情：替换默认的 <code>pinentry</code><br><code>pinentry</code> 是用来合用乎交互输入密码的，因为默认的 <code>pinentry</code> 依赖 <code>GPG_TTY</code> 所以可以再终端中实现输入密码。但是如果我们在其他的地方，比如 VSCode 或者 JB 全家桶的时候，就会出现因为无法输入密码导致失败。<br>所以我们需要安装第三方的 <code>pinentry-mac</code>，并替换默认 <code>pinentry</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install pinentry-mac</span><br><span class="line">echo &quot;pinentry-program $(which pinentry-mac)&quot; &gt;&gt; ~/.gnupg/gpg-agent.conf</span><br></pre></td></tr></table></figure>

<p>然后重启 <code>gpg-agent</code> 即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo RELOADAGENT | gpg-connect-agent</span><br></pre></td></tr></table></figure>

<h2 id="创建用于-SSH-鉴权的子密钥"><a href="#创建用于-SSH-鉴权的子密钥" class="headerlink" title="创建用于 SSH 鉴权的子密钥"></a>创建用于 SSH 鉴权的子密钥</h2><h3 id="创建子密钥"><a href="#创建子密钥" class="headerlink" title="创建子密钥"></a>创建子密钥</h3><p>首先第一步，查看一下我们生成的主密钥公钥相关信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/B8A51B592369E537 2023-05-10 [SC]</span><br><span class="line">      45275575D4E6F8A077851C9EB8A51B592369E537</span><br><span class="line">uid                   [ 绝对 ] zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line">sub   cv25519/D2EA38C64D46463D 2023-05-10 [E]</span><br></pre></td></tr></table></figure>

<p>第一行 <code>pub</code> 表示这个是公钥, <code>ed25519</code> 是上面创建密钥时选择的椭圆曲线方法, <code>/</code> 后面的 <code>B8A51B592369E537</code> 是公钥的16位短摘要, <code>2023-05-10</code> 是生成时间, <code>[SC]</code> 中 <code>S:signing</code> 表示可以用于签名 <code>C:certification</code> 表示可以用于认证。<br>第二行 <code>45275575D4E6F8A077851C9EB8A51B592369E537</code> 是密钥的40位长摘要。其中上面的短摘要就是长摘要的后16位<br>第三行 <code>uid</code> 是用户信息，<code>[ 绝对 ]</code> 表示该密钥的信任等级是最高级别: 绝对信任，后面分别是输入的名字，注释和电子邮件<br>第四行 <code>sub</code> 表示这个是子公钥，是创建主密钥的时候自动生成的一个子密钥，最后的<code>[E]</code> 中 <code>E:encryption</code> 表示可用于加密</p>
<p>当然我们也可以通过 <code>--list-secret-keys</code> 查看私钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-secret-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">sec   ed25519/B8A51B592369E537 2023-05-10 [SC]</span><br><span class="line">      45275575D4E6F8A077851C9EB8A51B592369E537</span><br><span class="line">uid                   [ 绝对 ] zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line">ssb   cv25519/D2EA38C64D46463D 2023-05-10 [E]</span><br></pre></td></tr></table></figure>

<p>内容和上面只有前面的 <code>pub</code> -&gt; <code>sec</code>(表示私钥), <code>sub</code> -&gt; <code>ssb</code>(表示子私钥) 不一样，其他的内容都一样。</p>
<p>通过上面知道主密钥的摘要是 <code>B8A51B592369E537</code>(这里用长短摘要都可以。但是为了方便，后面就都用短摘要。也可以直接使用 <code>uid</code> 中的姓名)<br>接下俩就需要用这个主密钥生成一个子密钥。因为需要用到高级自定义，所以需要加上 <code>--expert</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --expert --edit-key B8A51B592369E537       <span class="comment"># 或者是 gpg --expert --edit-key zebedy</span></span></span><br><span class="line">gpg (GnuPG) 2.4.1; Copyright (C) 2023 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">私钥可用。</span><br><span class="line"></span><br><span class="line">sec  ed25519/B8A51B592369E537</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  cv25519/D2EA38C64D46463D</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：E</span><br><span class="line">[ 绝对 ] (1). zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">gpg&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到这里 <code>shell</code> 变成了 <code>gpg&gt;</code> 表示进入了与 <code>GPG</code> 的交互</p>
<p>通过 <code>addkey</code> 添加一个新的子密钥，选择 <code>RSA（自定义用途）</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">gpg&gt;</span><span class="bash"> addkey</span></span><br><span class="line">请选择您要使用的密钥类型：</span><br><span class="line">   (3) DSA（仅用于签名）</span><br><span class="line">   (4) RSA（仅用于签名）</span><br><span class="line">   (5) ElGamal（仅用于加密）</span><br><span class="line">   (6) RSA（仅用于加密）</span><br><span class="line">   (7) DSA（自定义用途）</span><br><span class="line">   (8) RSA（自定义用途）</span><br><span class="line">  (10) ECC（仅用于签名）</span><br><span class="line">  (11) ECC（自定义用途）</span><br><span class="line">  (12) ECC（仅用于加密）</span><br><span class="line">  (13) 现有密钥</span><br><span class="line"> （14）卡中现有密钥</span><br><span class="line">您的选择是？ 8</span><br></pre></td></tr></table></figure>

<p>然后进入到了自定义选项中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的可实现的功能： 签名（Sign） 加密（Encrypt） 身份验证（Authenticate）</span><br><span class="line">目前启用的功能： 签名（Sign） 加密（Encrypt）</span><br><span class="line"></span><br><span class="line">   (S) 签名功能开关</span><br><span class="line">   (E) 加密功能开关</span><br><span class="line">   (A) 身份验证功能开关</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择是？ S</span><br></pre></td></tr></table></figure>

<p>这里可以看到这个子密钥目前启用的功能有 <code>签名（Sign）</code> 和 <code>加密（Encrypt）</code><br>但是 <code>SSH</code> 鉴权不需要这两个功能，所以我们输入<code>S</code> 回车后取消 <code>签名（Sign）</code> 的功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的可实现的功能： 签名（Sign） 加密（Encrypt） 身份验证（Authenticate）</span><br><span class="line">目前启用的功能： 加密（Encrypt）</span><br><span class="line"></span><br><span class="line">   (S) 签名功能开关</span><br><span class="line">   (E) 加密功能开关</span><br><span class="line">   (A) 身份验证功能开关</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择是？ E</span><br></pre></td></tr></table></figure>

<p>现在子密钥目前启用的功能就只有 <code>加密（Encrypt）</code> 了，再次输入 <code>E</code> 回车</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的可实现的功能： 签名（Sign） 加密（Encrypt） 身份验证（Authenticate）</span><br><span class="line">目前启用的功能：</span><br><span class="line"></span><br><span class="line">   (S) 签名功能开关</span><br><span class="line">   (E) 加密功能开关</span><br><span class="line">   (A) 身份验证功能开关</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择是？ A</span><br></pre></td></tr></table></figure>

<p>现在已启用功能就没有了任何内容，输入 <code>A</code> 回车后开启 <code>SSH</code> 鉴权需要的功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的可实现的功能： 签名（Sign） 加密（Encrypt） 身份验证（Authenticate）</span><br><span class="line">目前启用的功能： 身份验证（Authenticate）</span><br><span class="line"></span><br><span class="line">   (S) 签名功能开关</span><br><span class="line">   (E) 加密功能开关</span><br><span class="line">   (A) 身份验证功能开关</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择是？ Q</span><br></pre></td></tr></table></figure>

<p>然后输入 <code>Q</code> 结束自定义功能，进入 <code>RSA</code> 密钥选项。<br>因为添加子密钥的时候选择的是 <code>RSA</code> 密钥，所以这里需要指定密钥长度。长度越长，安全性越高。我这里就选择 <code>4096</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的长度应在 1024 位与 4096 位之间。</span><br><span class="line">您想要使用的密钥长度？(3072) 4096</span><br></pre></td></tr></table></figure>

<p>然后设置子密钥的有效期。因为也是个人长期使用，所以选择 <code>0 密钥永不过期</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">请设定这个密钥的有效期限。</span><br><span class="line">         0 = 密钥永不过期</span><br><span class="line">      &lt;n&gt;  = 密钥在 n 天后过期</span><br><span class="line">      &lt;n&gt;w = 密钥在 n 周后过期</span><br><span class="line">      &lt;n&gt;m = 密钥在 n 月后过期</span><br><span class="line">      &lt;n&gt;y = 密钥在 n 年后过期</span><br><span class="line">密钥的有效期限是？(0) 0</span><br></pre></td></tr></table></figure>

<p>然后经过两次 输入 y 的确认后，会提示输入主密钥的密码。因为创建子密钥需要用到主密钥的私钥，所以需要用到主密钥的密码<br>输入完正确密码后，经过短暂时间就生成了一个 <code>RSA</code> 密钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘</span><br><span class="line">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数</span><br><span class="line">发生器有更好的机会获得足够的熵。</span><br><span class="line"></span><br><span class="line">sec  ed25519/B8A51B592369E537</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  cv25519/D2EA38C64D46463D</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：E</span><br><span class="line">ssb  rsa4096/A6BD1D16B38E90A9</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：AR</span><br><span class="line">[ 绝对 ] (1). zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">gpg&gt;</span></span><br></pre></td></tr></table></figure>

<p>和上面相比可以看到已经多了一个摘要为 <code>A6BD1D16B38E90A9</code> 的子密钥<br>还有最后一步，输入 <code>save</code> 保存就退出 <code>GPG</code> 的交互 <code>shell</code> 了</p>
<p>至此，子密钥创建完成。</p>
<p>回到查看密钥信息那里。我们再通过 <code>--list-keys</code> 查看当前密钥信息就可以看到这个子密钥了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/B8A51B592369E537 2023-05-10 [SC]</span><br><span class="line">      45275575D4E6F8A077851C9EB8A51B592369E537</span><br><span class="line">uid                   [ 绝对 ] zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line">sub   cv25519/D2EA38C64D46463D 2023-05-10 [E]</span><br><span class="line">sub   rsa4096/A6BD1D16B38E90A9 2023-05-10 [AR]</span><br></pre></td></tr></table></figure>

<p>相比上面可以看到到了一个 <code>A6BD1D16B38E90A9</code> 的子密钥</p>
<h3 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h3><h4 id="启用-GPG-Agent-的-SSH-支持"><a href="#启用-GPG-Agent-的-SSH-支持" class="headerlink" title="启用 GPG Agent 的 SSH 支持"></a>启用 GPG Agent 的 SSH 支持</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.gnupg/gpg-agent.conf         # 文件可能不存在，如不存在则创建</span><br></pre></td></tr></table></figure>

<p>在文件中单独一行添加 <code>enable-ssh-support</code></p>
<h4 id="设置-GPG-Agent-替代-SSH-Agent"><a href="#设置-GPG-Agent-替代-SSH-Agent" class="headerlink" title="设置 GPG Agent 替代 SSH Agent"></a>设置 GPG Agent 替代 SSH Agent</h4><p>修改对应 shell 的配置文件 (我使用的是 <code>zsh</code>，自己根据使用的 <code>shell</code> 调整)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>添加以下内容到合适的地方</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GPG_TTY=$(tty)</span><br><span class="line">export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)</span><br><span class="line">gpgconf --launch gpg-agent</span><br></pre></td></tr></table></figure>

<h4 id="添加子密钥-keygrip"><a href="#添加子密钥-keygrip" class="headerlink" title="添加子密钥 keygrip"></a>添加子密钥 keygrip</h4><p>首先通过 <code>--with-keygrip</code> 获取子密钥的 <code>keygrip</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --with-keygrip --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/B8A51B592369E537 2023-05-10 [SC]</span><br><span class="line">      45275575D4E6F8A077851C9EB8A51B592369E537</span><br><span class="line">      Keygrip = A3395689BC37EAF960298BC1696D92091222CE0F</span><br><span class="line">uid                   [ 绝对 ] zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line">sub   cv25519/D2EA38C64D46463D 2023-05-10 [E]</span><br><span class="line">      Keygrip = 7418F1361C6953577306E4D7B32253EC5271B100</span><br><span class="line">sub   rsa4096/A6BD1D16B38E90A9 2023-05-10 [AR]</span><br><span class="line">      Keygrip = 1434286BFA6084E76B6B6E1A6E2FD84340FEC182</span><br></pre></td></tr></table></figure>

<p>找到上一步创建的子密钥 <code>A6BD1D16B38E90A9</code> 他的 <code>Keygrip = 1434286BFA6084E76B6B6E1A6E2FD84340FEC182</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.gnupg/sshcontrol</span><br></pre></td></tr></table></figure>

<p>将这个 <code>1434286BFA6084E76B6B6E1A6E2FD84340FEC182</code> 添加到单独一行</p>
<p>然后重启终端<br>检查 <code>SSH Key</code> 是否存在</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-add -l</span></span><br><span class="line">4096 SHA256:3R/hEI7YZwM8NPSnDI9lXwDCjuaSKvQf1KtvsUrC9S8 (none) (RSA)</span><br></pre></td></tr></table></figure>

<p>看到类似内容就表示添加成功</p>
<p>然后导出 SSH 公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --export-ssh-key A6BD1D16B38E90A9         <span class="comment"># 或者是 gpg --export-ssh-key zebedy</span></span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDfQkunrCVxziMf+54WiSPBUtjc/oOLfjTfs9AR44pQzmTI/OmzLevaVxOVrkVOqB2wmN2pVAmR0zB/DPdqBJTwZv/qBnxdmPmA9aWXcINy+wITnXOaSi+ipPryj5g2fF9qu/tmfsQKDkyae/kA67+Ji7p8rKveQh8rRyuDazspuUAn1AumPA/NrajQYcXUMMk9pogZkTbb7lX2ruFnaJCx9/7Jf88usxf6ny7KePsaGClR4xtLCJXpWmYSKrxKbZPITLDCnq7zC0V0tbexpLDlV+bPFRrCq/OzBjUthpXzFtBuD3ZOLn/LaoilOZMumfwZU9FuarMjwN7wkt7jLofaK05zo8YypZS+a68GzHgwTNqwq+eS/WhKHyw2RyXlrmYjT5pRhmIDWEKxVUTjEJaQCMBDDaDNmXnKTUQ7FsFjhN/VKv4EecJT1OOIq/PdUzhWzy6rpjWaWLvLVdpWGbehKVYiMVVPy6OBBSPUxhoxyJRBCfkoIoa4DklZ4aZF28DYaamDuAliQnqJbBQGrO8xjY4jFJl0ZRH++QDlIPMRg/kWyhqGDUrlnV+avhNnIuZB/T4Rze1NdZxYcvuLwzy/C7/oGhXa5O9Hf1kawihHJPCOvpiPcFuqlkcn3C+uBTXmQJkYebmVr+XmjBUgpxXyGvDYAUgcM28aj5Qc4bSeQw== openpgp:0xB38E90A9</span><br></pre></td></tr></table></figure>

<p>然后就可以把这个它添加到任何需要使用 <code>SSH</code> 的地方，比如 <code>GitHub</code> 或者自己服务器上的 <code>~/.ssh/authorized_keys</code> 中</p>
<h2 id="创建用于-代码签名-的子密钥"><a href="#创建用于-代码签名-的子密钥" class="headerlink" title="创建用于 代码签名 的子密钥"></a>创建用于 代码签名 的子密钥</h2><p>注意: 如果在<a href="#%E7%94%9F%E6%88%90%E4%B8%BB%E5%AF%86%E9%92%A5">生成主密钥</a>的时候输入的邮箱不是 <code>GitHub</code> 或者 <code>GitLab</code> 的邮箱，那么需要在编辑密钥的交互中通过 <code>adduid</code> 给主密钥添加对应的邮箱。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --edit-key B8A51B592369E537           <span class="comment"># 编辑主密钥</span></span></span><br><span class="line">gpg (GnuPG) 2.4.1; Copyright (C) 2023 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">私钥可用。</span><br><span class="line"></span><br><span class="line">sec  ed25519/B8A51B592369E537</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  cv25519/D2EA38C64D46463D</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：E</span><br><span class="line">ssb  rsa4096/A6BD1D16B38E90A9</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：AR</span><br><span class="line">ssb  ed25519/F9A2BB2BF7293EBF</span><br><span class="line">     创建于：2023-05-12  有效至：永不       可用于：S</span><br><span class="line">[ 绝对 ] (1). zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">gpg&gt;</span><span class="bash"> adduid                       <span class="comment"># 添加 uid</span></span></span><br><span class="line">真实姓名： zebedy                   # GitHub/GitLab 用户名（也可以不和用户名一致）</span><br><span class="line">电子邮件地址： github@gmail.com      # GitHub/GitLab 邮箱</span><br><span class="line">注释： github                       # 可选</span><br><span class="line">您选定了此用户标识：</span><br><span class="line">    “zebedy (github) &lt;github@gmail.com&gt;”</span><br><span class="line"></span><br><span class="line">更改姓名（N）、注释（C）、电子邮件地址（E）或确定（O）/退出（Q）？ O</span><br><span class="line"></span><br><span class="line">sec  ed25519/B8A51B592369E537</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  cv25519/D2EA38C64D46463D</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：E</span><br><span class="line">ssb  rsa4096/A6BD1D16B38E90A9</span><br><span class="line">     创建于：2023-05-10  有效至：永不       可用于：AR</span><br><span class="line">ssb  ed25519/F9A2BB2BF7293EBF</span><br><span class="line">     创建于：2023-05-12  有效至：永不       可用于：S</span><br><span class="line">[ 绝对 ] (1)  zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line">[ 未知 ] (2). zebedy (github) &lt;github@gmail.com&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">gpg&gt;</span><span class="bash"> save                     <span class="comment"># save 保存退出</span></span></span><br></pre></td></tr></table></figure>

<p>然后查看密钥信息就可以看到已经包含新的 <code>uid</code> 了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/B8A51B592369E537 2023-05-10 [SC]</span><br><span class="line">      45275575D4E6F8A077851C9EB8A51B592369E537</span><br><span class="line">uid                   [ 绝对 ] zebedy (github) &lt;github@gmail.com&gt;</span><br><span class="line">uid                   [ 绝对 ] zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line">sub   cv25519/D2EA38C64D46463D 2023-05-10 [E]</span><br><span class="line">sub   rsa4096/A6BD1D16B38E90A9 2023-05-10 [AR]</span><br></pre></td></tr></table></figure>

<h3 id="创建子密钥-1"><a href="#创建子密钥-1" class="headerlink" title="创建子密钥"></a>创建子密钥</h3><p>依据上面我们创建的主密钥，无须高级自定义(不必使用 <code>--expert</code> 参数)创建一个子密钥<br>这里密钥类型可以选择 <code>ECC</code> 也可以选择 <code>RSA</code>，但是注意，不管是 <code>ECC</code> 还是 <code>RSA</code>，都需要选择包含 <code>仅用于签名</code> 的选项<br>这里我就用 <code>ECC</code> 举例，具体过程就不再赘述，和上面<a href="#%E5%88%9B%E5%BB%BA%E5%AD%90%E5%AF%86%E9%92%A5">创建子密钥</a>的过程基本一致，只是没有了自定义密钥功能，过程更简单了。<br>创建完成后同样记得使用 <code>save</code> 保存后自动退出 <code>GPG</code> 的交互环境，然后查询一下当前的密钥。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/B8A51B592369E537 2023-05-10 [SC]</span><br><span class="line">      45275575D4E6F8A077851C9EB8A51B592369E537</span><br><span class="line">uid                   [ 绝对 ] zebedy (github) &lt;github@gmail.com&gt;</span><br><span class="line">uid                   [ 绝对 ] zebedy (主密钥) &lt;example@gmail.com&gt;</span><br><span class="line">sub   cv25519/D2EA38C64D46463D 2023-05-10 [E]</span><br><span class="line">sub   rsa4096/A6BD1D16B38E90A9 2023-05-10 [AR]</span><br><span class="line">sub   ed25519/F9A2BB2BF7293EBF 2023-05-12 [S]</span><br></pre></td></tr></table></figure>

<p>就看到了新创建的密钥 <code>F9A2BB2BF7293EBF</code> 用途只有 <code>[S]</code>，只用于签名。</p>
<h3 id="查询子密钥公钥"><a href="#查询子密钥公钥" class="headerlink" title="查询子密钥公钥"></a>查询子密钥公钥</h3><p>通过 <code>--export</code> 查询子密钥公钥，但是默认是二进制的格式，所以还需要 <code>--armor</code> 显示为文本格式才能使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --armor --<span class="built_in">export</span> F9A2BB2BF7293EBF!              <span class="comment"># 注意这里在密钥摘要末尾有一个英文的感叹号!</span></span></span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"></span><br><span class="line">mDMEZFtHahYJKwYBBAHaRw8BAQdAbeuOrh1oHTtDQ8kycALUpsOxLaYd/JmIXNjO</span><br><span class="line">wSJbEqm0JnplYmVkeSAo5Li75a+G6ZKlKSA8ZXhhbXBsZUBnbWFpbC5jb20+iJME</span><br><span class="line">ExYKADsWIQRFJ1V11Ob4oHeFHJ64pRtZI2nlNwUCZFtHagIbAwULCQgHAgIiAgYV</span><br><span class="line">CgkICwIEFgIDAQIeBwIXgAAKCRC4pRtZI2nlN0LWAQDIOo2V1ev5MucmoGb9fsp8</span><br><span class="line">q20Pcc07GBKDi36V7yiRswD/WA4WwnJnW9OE2u9BVnbxKQv6pW9le/e9NzClNN3q</span><br><span class="line">hwi4MwRkXadVFgkrBgEEAdpHDwEBB0DPev1UYl6PX2CdPzEIG+7zca0eUNhQsVGo</span><br><span class="line">owswb6IfuIjvBBgWCgAgFiEERSdVddTm+KB3hRyeuKUbWSNp5TcFAmRdp1UCGwIA</span><br><span class="line">gQkQuKUbWSNp5Td2IAQZFgoAHRYhBEhFiAR0mLtt8h6umvmiuyv3KT6/BQJkXadV</span><br><span class="line">AAoJEPmiuyv3KT6/lSQA/Rt0TJbGMCZZ9tLvzIm+fQPTG4t4T20cqhRjwJc2Zvfd</span><br><span class="line">AQDABHBITeK01kVb+cqcxNIIBaX7ZE8KR/K/k/31kQuYBaLUAPwJkBI78qeiYNM+</span><br><span class="line">Lu0EGNuaapTZ2dzgBo6fldhoZVtpEAEA0Gd1OTPzEuKi7h0gERU2QfFfePaZbyZK</span><br><span class="line">2RlF1XBR6gM=</span><br><span class="line">=8/a2</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure>

<p>为什么要在摘要末尾添加一个 <code>!</code> 号呢？<br>因为如果没有这个感叹号则会导出这个子密钥所属的主密钥下的所有公钥。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --armor --<span class="built_in">export</span> F9A2BB2BF7293EBF               <span class="comment"># 这里没有感叹号，发现内容相比上面长了很多</span></span></span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"></span><br><span class="line">mDMEZFtHahYJKwYBBAHaRw8BAQdAbeuOrh1oHTtDQ8kycALUpsOxLaYd/JmIXNjO</span><br><span class="line">wSJbEqm0JnplYmVkeSAo5Li75a+G6ZKlKSA8ZXhhbXBsZUBnbWFpbC5jb20+iJME</span><br><span class="line">ExYKADsWIQRFJ1V11Ob4oHeFHJ64pRtZI2nlNwUCZFtHagIbAwULCQgHAgIiAgYV</span><br><span class="line">CgkICwIEFgIDAQIeBwIXgAAKCRC4pRtZI2nlN0LWAQDIOo2V1ev5MucmoGb9fsp8</span><br><span class="line">q20Pcc07GBKDi36V7yiRswD/WA4WwnJnW9OE2u9BVnbxKQv6pW9le/e9NzClNN3q</span><br><span class="line">hwi4OARkW0dqEgorBgEEAZdVAQUBAQdAHTe/jcQGU3sTIFXGRtuHmWWcSuwD2Ihq</span><br><span class="line">Nw5EApNJT1QDAQgHiHgEGBYKACAWIQRFJ1V11Ob4oHeFHJ64pRtZI2nlNwUCZFtH</span><br><span class="line">agIbDAAKCRC4pRtZI2nlN104AQDNtW2d4kP6VwLl+hi3zAuvtilkxo/gA+7wPiBg</span><br><span class="line">neGJKgEA5QPf6bwTPdWe4nbOSCl0DTSkait2NvJV8kPVLa+rPwK5Ag0EZFtXWQEQ</span><br><span class="line">AN9CS6esJXHOIx/7nhaJI8FS2Nz+g4t+NN+z0BHjilDOZMj86bMt69pXE5WuRU6o</span><br><span class="line">HbCY3alUCZHTMH8M92oElPBm/+oGfF2Y+YD1pZdwg3L7AhOdc5pKL6Kk+vKPmDZ8</span><br><span class="line">X2q7+2Z+xAoOTJp7+QDrv4mLunysq95CHytHK4NrOym5QCfUC6Y8D82tqNBhxdQw</span><br><span class="line">yT2miBmRNtvuVfau4WdokLH3/sl/zy6zF/qfLsp4+xoYKVHjG0sIlelaZhIqvEpt</span><br><span class="line">k8hMsMKervMLRXS1t7GksOVX5s8VGsKr87MGNS2GlfMW0G4Pdk4uf8tqiKU5ky6Z</span><br><span class="line">/BlT0W5qsyPA3vCS3uMuh9orTnOjxjKllL5rrwbMeDBM2rCr55L9aEofLDZHJeWu</span><br><span class="line">ZiNPmlGGYgNYQrFVROMQlpAIwEMNoM2ZecpNRDsWwWOE39Uq/gR5wlPU44ir891T</span><br><span class="line">OFbPLqumNZpYu8tV2lYZt6EpViIxVU/Lo4EFI9TGGjHIlEEJ+SgihrgOSVnhpkXb</span><br><span class="line">wNhpqYO4CWJCeolsFAas7zGNjiMUmXRlEf75AOUg8xGD+RbKGoYNSuWdX5q+E2ci</span><br><span class="line">5kH9PhHN7U11nFhy+4vDPL8Lv+gaFdrk70d/WRrCKEck8I6+mI9wW6qWRyfcL64F</span><br><span class="line">NeZAmRh5uZWv5eaMFSCnFfIa8NgBSBwzbxqPlBzhtJ5DABEBAAGIbwQYFgoAIRYh</span><br><span class="line">BEUnVXXU5vigd4UcnrilG1kjaeU3BQJkW1dZAxsgBAAA4wsA/1Ji946mnKlMCGvq</span><br><span class="line">+OhC0v16b2/teXfE81Mrqu55mjIpAPkBYSodm66PHU3YwJemfWUbIzkMIAfra7AY</span><br><span class="line">5HBt0MRmArgzBGRdp1UWCSsGAQQB2kcPAQEHQM96/VRiXo9fYJ0/MQgb7vNxrR5Q</span><br><span class="line">2FCxUaijCzBvoh+4iO8EGBYKACAWIQRFJ1V11Ob4oHeFHJ64pRtZI2nlNwUCZF2n</span><br><span class="line">VQIbAgCBCRC4pRtZI2nlN3YgBBkWCgAdFiEESEWIBHSYu23yHq6a+aK7K/cpPr8F</span><br><span class="line">AmRdp1UACgkQ+aK7K/cpPr+VJAD9G3RMlsYwJln20u/Mib59A9Mbi3hPbRyqFGPA</span><br><span class="line">lzZm990BAMAEcEhN4rTWRVv5ypzE0ggFpftkTwpH8r+T/fWRC5gFotQA/AmQEjvy</span><br><span class="line">p6Jg0z4u7QQY25pqlNnZ3OAGjp+V2GhlW2kQAQDQZ3U5M/MS4qLuHSARFTZB8V94</span><br><span class="line">9plvJkrZGUXVcFHqAw==</span><br><span class="line">=TgM3</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure>

<p>因为我们只需要这个子密钥，所以使用 <code>!</code> 只包含该子密钥的公钥就行。<br>然后将该公钥添加到 <code>GitHub</code> 或者 <code>GitLab</code> 中。</p>
<h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><p>给 Git 全局配置签名 Key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.signingkey F9A2BB2BF7293EBF!</span><br></pre></td></tr></table></figure>
<p>如果不需要自动使用 GPG 签名代码，可以每次在 <code>commit</code> 的时候使用 <code>-S</code> 参数（大写S）进行签名<br>如果想提交的时候自动签名，可以进行配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global commit.gpgsign true</span><br></pre></td></tr></table></figure>

<p>然后再次提交代码后就可以查看签名信息了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --show-signature</span><br></pre></td></tr></table></figure>

<p>同时 <code>push</code> 到 <code>GitHub</code> 上后也可以看到提交有一个 <code>verified</code> 的标记。<br>至此，创建密钥相关的部分就先告一段落。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<center>Hello World</center>]]></content>
  </entry>
  <entry>
    <title>更改 macOS 强调色</title>
    <url>/post/c59c6467.html</url>
    <content><![CDATA[<p>Apple 在 <a href="https://www.apple.com/imac-24">iMac 24”</a> Mac 中首次使用了新的强调色，这些强调色是这些 Mac 独有的。但是现在只要是 macOS 11.3.1 以上的系统，即使不是 iMac 24” 机器，也可以使用这些特有的强调色。</p>
<span id="more"></span>
<p>首先需要开启基于硬件的强调色 <code>NSColorSimulateHardwareAccent</code> 功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write -g NSColorSimulateHardwareAccent -bool YES</span><br></pre></td></tr></table></figure>
<p>然后通过 <code>NSColorSimulatedHardwareEnclosureNumber</code> 选择其中任意一种颜色。其中可选的颜色选项为 3 到 8 (包含 3 和 8)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write -g NSColorSimulatedHardwareEnclosureNumber -int 3</span><br></pre></td></tr></table></figure>
<p>然后重新启动电脑或者退出登录重新登录即可生效。<br>然后在 <strong>系统设置</strong> -&gt; <strong>外观选项卡</strong> -&gt; <strong>强调色</strong> 和 <strong>高亮标记颜色</strong> 选项中会出现一个 <strong>这台Mac</strong> 的颜色选项，其中颜色即为上面设置的颜色。</p>
<p>以下是 <code>NSColorSimulatedHardwareEnclosureNumber</code> 不同值的实际效果</p>
<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-3.png" class="" width="700" height="230" title="3 - 黄色">

<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-4.png" class="" width="700" height="230" title="4 - 绿色">

<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-5.png" class="" width="700" height="230" title="5 - 蓝色">

<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-6.png" class="" width="700" height="230" title="6 - 粉色">

<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-7.png" class="" width="700" height="230" title="7 - 紫色">

<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-8.png" class="" width="700" height="230" title="8 - 橙色">
]]></content>
  </entry>
  <entry>
    <title>搭建家庭私人 GitLab 服务器</title>
    <url>/post/8d4f8799.html</url>
    <content><![CDATA[<p>大概今年（2022）一月中旬的时候入手了一个 <a href="https://r86s.net/">R86S</a> 的小主机。因为错过了众筹的车，所以是直接下的单。最后入手了 16G 的黑色千兆版本。不上万兆一个原因是家里没有这个需求，还有一个就是万兆版的没有 NVME 硬盘位，这一点对我还是刚需。<span id="more"></span>最后用了差不多一周的时间，终于在年前，这个心心念的小主机到手了。</p>
<p>有关这个小主机我就不多做介绍了，今天主要是介绍一下我怎么用它在我的家庭环境搭建一个私人的 GitLab。这篇文章从我为什么要搭建家庭私人 GitLab 以及如何搭建。都会都做一个比较详细的介绍。</p>
<h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>家里是有一个 J4125 的软路由，去年很早就买了。一直在我家作为主路由负责拨号和科学上网的功能，用的 OpenWrt 也是我自己配置和 GitHub Action 编译的，也满足了我家的基本需求。而且也因为是物理机直装，再加上害怕 J4125 玩起来怕性能不够，再影响了正常的网络。所以也就不想再折腾他了，就让他安安心心做我家的路由器就好了。</p>
<p>但与此同时呢，作为一个爱折腾的程序员，身边的很多不管是硬件还是软件的小玩意儿都是有特别的需求的。</p>
<p>就比如去年（2021）年买的一个 <a href="https://drop.com/buy/stack-overflow-the-key-macropad">STACK OVERFLOW THE KEY MACROPAD</a> 键盘，配上从淘宝买的键帽，因为使用 QMK 的键盘方案，所以可以定制固件。现在已经成为了我的专用密码输入器。但是问题来了，因为我现在还尝试看他还有没别的好玩的东西，所以我需要对这个键盘固件的代码不断进行修改、编译、刷入，然后再尝试修改、编译、刷入。这样的操作重复起来会让人很繁琐，但是因为固件中存在一些敏感代码（比如我的各种密码）所以不方便托管到 GitHub。所以之前我就在想要是能有一个私人的 Git 多好。除了代码的托管，如果还可以加入 CI&#x2F;CD 这种持续集成的能力，就可以解放很多无谓的重复的劳动。而能同时满足这个需求的让我想到的第一个解决方案就是 GitLab 了。</p>
<p>除了上面说的那个键盘固件，还有比如说我的 Rime（鼠须管）的配置文件，因为词库中有很多的自定义词，以及还有人名通讯地址之类的敏感词，所以也是不方便把这个配置直接托管在 GitHub 上的。</p>
<p>还有现在看到的这个博客，用 Hexo 生成的 GitHub Pages 静态页面，博客本身的代码我不想放到 GitHub 上，所以这时候的我也需要一个私人的 GitLab。除了能实现代码的托管，还能顺便利用 GitLab CI 实现一键发布，每次只要提交了代码，稍等片刻 GitHub Pages 就自动部署好了。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>上面说了那么多。现在有了 R86S 这样一个性能跟得上的小主机，在东西到货的第二天，就开始了他的折腾之路。</p>
<h2 id="安装硬件"><a href="#安装硬件" class="headerlink" title="安装硬件"></a>安装硬件</h2><p>因为这个 R86S 只带了一个电源，内置的一个 EMMC 容量只有 128G 且性能堪忧。所以第一步是安装一个自己的 NVME 固态。记得之前有一块买多了的吃灰三星 980 Pro 500G，都没有开封。之前还差点给挂到海鲜市场出掉，现在终于派上用场了。<br>安装好硬盘然后找一个网线，连接好路由器的 LAN 口和 R86S 的随便一个网口。连接好键盘鼠标，就可以插上电源自动上电开机了。</p>
<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>既然是是要做小型服务器，哪有用桌面操作系统的。所以这里就选择了 <a href="https://ubuntu.com/download/server">Ubuntu Server 20.04.3 LTS</a>。下载完镜像后，写入到 U盘。然后就可以通过 U盘 启动就可以进安装环节了。<br>安装系统有几个点需要注意一下</p>
<ol>
<li><p>分配 IP 地址的方式</p>
<p> 在进行网络配置的时候，既可以通过 DHCP 动态分配 IP，也可以手动指定。如果是 DHCP 分配，则后续需要到路由器中绑定一下 Mac 地址和 IP，毕竟我们在内网访问也是需要有一个内网的固定 IP。通过手动指定 IP 地址，要注意不要和现有分配的的地址冲突。手动指定 IP 就不需要后续到路由器绑定 Mac 地址和 IP 了。 </p>
</li>
<li><p>选择安装硬盘</p>
<p> 因为主板上带一个 EMMC，所以在选择硬盘的时候记得选自己安装的 NVME SSD 上，而且调整根目录大小调整为剩余 SSD 所由空间。否则根目录默认只划分了 100G，后面进入系统后还需要手动扩容。</p>
</li>
<li><p>安装后修改网络配置</p>
<p> 安装完系统后重新启动有可能会出现日志 <code>A start job is running for wait for network to be configured.</code> 导致需要很长时间才能进入系统。这时候需要等进到系统后修改网络配置文件</p>
<p> <code>/etc/netplan/00-installer-config.yaml</code>（文件名 <code>00-installer-config.yaml</code> 不固定，但是文件名类似的一个 <code>yaml</code> 文件)</p>
<p> 在每一个设备下面添加 <code>optional: true</code></p>
<p> 最后的配置应该类似</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">    <span class="attr">ethernets:</span></span><br><span class="line">        <span class="attr">enp1s0:</span></span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">enp2s0:</span></span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">enp3s0:</span></span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p> 然后应用更改</p>
 <figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">netplan <span class="built_in">apply</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="创建-GitLab-备份位置"><a href="#创建-GitLab-备份位置" class="headerlink" title="创建 GitLab 备份位置"></a>创建 GitLab 备份位置</h2><p>上面说到了，这个 R86S 自带一个 128G的 EMMC 存储，虽然性能比较差，但是东西不能浪费了。所以这里我拿来作为一个独立的 GitLab 数据备份存储，即使是主硬盘挂了，还有一份独立的备份存在，而且短时间内 128G 还是够用的。</p>
<h3 id="创建新的硬盘分区"><a href="#创建新的硬盘分区" class="headerlink" title="创建新的硬盘分区"></a>创建新的硬盘分区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cfdisk /dev/mmcblk0        # mmcblk0 是 EMMC 设备</span><br><span class="line">sudo mkfs.ext4 /dev/mmcblk0     # 格式化为 ext4</span><br></pre></td></tr></table></figure>

<h3 id="挂载到-x2F-mmc"><a href="#挂载到-x2F-mmc" class="headerlink" title="挂载到 &#x2F;mmc"></a>挂载到 &#x2F;mmc</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一行</span></span><br><span class="line">/dev/mmcblk0 /mmc ext4 defaults 0 0</span><br></pre></td></tr></table></figure>
<h2 id="安装-GitLab"><a href="#安装-GitLab" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y curl openssh-server ca-certificates tzdata perl</span><br></pre></td></tr></table></figure>
<h3 id="添加-GitLab-源"><a href="#添加-GitLab-源" class="headerlink" title="添加 GitLab 源"></a>添加 GitLab 源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h3 id="安装-GitLab-1"><a href="#安装-GitLab-1" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gitlab-ce</span><br></pre></td></tr></table></figure>
<h3 id="获取-root-用户密码"><a href="#获取-root-用户密码" class="headerlink" title="获取 root 用户密码"></a>获取 root 用户密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure>
<p><strong>注意，这个文件后面会被自动删除。因此请及时保管好该密码或者及时进行修改。</strong></p>
<h3 id="配置-GitLab"><a href="#配置-GitLab" class="headerlink" title="配置 GitLab"></a>配置 GitLab</h3><p>如果上面几步都比较顺利，不出意外，现在应该已经在这个系统中安装好了 GitLab。接下来先进行一些简要地配置。</p>
<p>GitLab 的配置文件是 <code>/etc/gitlab/gitlab.rb</code></p>
<p>我家 OpenWrt 主路由在 DHCP 中设置的 <code>本地服务器</code> 和 <code>本地域名</code> 分别为 <code>/home/</code> 和 <code>home</code>，同时我也希望能通过域名访问这个 GitLab 服务器。所以我还添加了一条 <code>自定义挟持域名</code>，其中域名为 <code>git</code>，IP 地址为 R86S 分配的固定IP（比如我家的是 <code>192.168.50.50</code>）。这样我就可以通过域名 <code>http://git.home</code> 来访问这个 GitLab 服务器了。</p>
<p>根据以上前提，这里需要修改的几个地方</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">external_url</span> <span class="string">&#x27;http://git.home&#x27;</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;gitlab_ssh_host&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;git.home&#x27;</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;time_zone&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;backup_path&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;/mmc&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>backup_path</code> 即为 <a href="#%E5%88%9B%E5%BB%BA-GitLab-%E5%A4%87%E4%BB%BD%E4%BD%8D%E7%BD%AE">EMMC 设备的挂载点</a></p>
<p>修改完 <code>gitlab.rb</code> 后需要重新配置 GitLab 才能生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<p>稍等片刻，在浏览器中打开 <a href="http://git.home/">http://git.home</a> 就可以看到搭建好的 GitLab 了。</p>
]]></content>
  </entry>
  <entry>
    <title>Python 给内置类型增加额外方法</title>
    <url>/post/6cf2e209.html</url>
    <content><![CDATA[<p>事情一开始是这个样子的。<br>记得某一天，在写代码的时候。我需要将一个字典深拷贝，然后我熟练的敲下了下面的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line">copy_dict = deepcopy(origin_dict)</span><br></pre></td></tr></table></figure>

<p>但是这样的代码我总觉得不优雅。因为 <code>dict</code> 自带一个 <code>copy</code> 方法。但是可惜的是他是个浅拷贝。<br>这就难受了呀，所以我有一个想法：既然他不自带 deepcopy，那咱们给它添加一个？</p>
<span id="more"></span>

<p>只是按照我能想到的方法实现了一遍，发现都不行。而最有可能的方法就是修改 <code>__dict__</code> 实现</p>
<p>但是因为 <code>__dict__</code> 是一个 <code>mappingproxy</code> 类型对象，是一个不可变类型对象。</p>
<p>但是顺着 <code>mappingproxy</code> 的 C 源代码，发现可以使用相同的方式来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyType</span>(<span class="params">ctypes.Structure</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyObject</span>(<span class="params">ctypes.Structure</span>):</span></span><br><span class="line">    Py_ssize_t = (</span><br><span class="line">        ctypes.c_int64 <span class="keyword">if</span> ctypes.sizeof(ctypes.c_void_p) == <span class="number">8</span> <span class="keyword">else</span> ctypes.c_int32</span><br><span class="line">    )</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;ob_refcnt&quot;</span>, Py_ssize_t),</span><br><span class="line">        (<span class="string">&quot;ob_type&quot;</span>, ctypes.POINTER(PyType)),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyTypeObject</span>(<span class="params">PyObject</span>):</span></span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;dict&quot;</span>, ctypes.POINTER(PyObject))</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject</span>(<span class="params">class_, method, force=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span>(<span class="params">function</span>):</span></span><br><span class="line">        name_, dict_ = class_.__name__, class_.__dict__</span><br><span class="line">        proxy_dict = PyTypeObject.from_address(<span class="built_in">id</span>(dict_))</span><br><span class="line">        namespace = &#123;&#125;</span><br><span class="line">        ctypes.pythonapi.PyDict_SetItem(</span><br><span class="line">            ctypes.py_object(namespace),</span><br><span class="line">            ctypes.py_object(name_),</span><br><span class="line">            proxy_dict.<span class="built_in">dict</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> namespace.get(name_, &#123;&#125;).get(method, <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;已存在方法 <span class="subst">&#123;class_.__name__&#125;</span>.<span class="subst">&#123;method&#125;</span>()&quot;</span>)</span><br><span class="line">        namespace[name_][method] = function</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _</span><br></pre></td></tr></table></figure>

<p>而使用使用方法也很简单，比如上面的给 <code>dict</code> 添加一个 <code>deepcopy()</code> 实现字典的深拷贝</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="meta">@inject(<span class="params"><span class="built_in">dict</span>, <span class="string">&#x27;deepcopy&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deepcopy</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> copy.deepcopy(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证一下</span></span><br><span class="line">origin_dict = &#123;<span class="string">&quot;goods&quot;</span>: [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;初始字典: <span class="subst">&#123;origin_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line">copy_dict = origin_dict.copy() <span class="comment"># 自带的 copy() 浅拷贝</span></span><br><span class="line">deepcopy_dict = origin_dict.deepcopy() <span class="comment"># 添加的 deepcopy() 深拷贝</span></span><br><span class="line"></span><br><span class="line">origin_dict[<span class="string">&quot;goods&quot;</span>].append(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;初始字典变更: <span class="subst">&#123;origin_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;banana&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;.copy() 结果: <span class="subst">&#123;copy_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;banana&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;.deepcopy() 结果: <span class="subst">&#123;deepcopy_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>

<p>再或者给 <code>list</code> 添加一个 <code>average()</code> 方法计算平均数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@inject(<span class="params"><span class="built_in">list</span>, <span class="string">&#x27;average&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">l</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(l) / <span class="built_in">len</span>(l)</span><br><span class="line"></span><br><span class="line">score = [<span class="number">95.0</span>, <span class="number">89.5</span>, <span class="number">77.0</span>, <span class="number">91.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(score.average())  <span class="comment"># 88.125</span></span><br></pre></td></tr></table></figure>

<p>再或者给字符串添加一个 <code>json()</code> 方法，可以直接通过 <code>str.json()</code> 将该字符串格式化为 <code>json</code> 对象（当然前提是这个字符串是可以被反序列化为 <code>json</code> 对象）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"></span><br><span class="line"><span class="meta">@inject(<span class="params"><span class="built_in">str</span>, <span class="string">&#x27;json&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> loads(s)</span><br><span class="line"></span><br><span class="line">info = <span class="string">&#x27;&#123;&quot;first_name&quot;: &quot;Michael&quot;, &quot;last_name&quot;: &quot;Rodgers&quot;, &quot;department&quot;: &quot;Marketing&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(info.json()) <span class="comment"># &#123;&#x27;first_name&#x27;: &#x27;Michael&#x27;, &#x27;last_name&#x27;: &#x27;Rodgers&#x27;, &#x27;department&#x27;: &#x27;Marketing&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>同样的，比如给 <code>int</code> 类型添加 <code>add(number)</code> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@inject(<span class="params"><span class="built_in">int</span>, <span class="string">&#x27;add&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">i, number</span>):</span></span><br><span class="line">    <span class="keyword">return</span> i + number</span><br><span class="line"></span><br><span class="line">munber = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(number.add(<span class="number">3</span>)) <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以进行链式调用</span></span><br><span class="line"><span class="built_in">print</span>(munber.add(<span class="number">3</span>).add(<span class="number">7</span>).add(-<span class="number">1</span>)) <span class="comment"># 14</span></span><br></pre></td></tr></table></figure>

<p>当然除了内置类型，也可以修补自定义类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        self.number = n</span><br><span class="line"></span><br><span class="line"><span class="meta">@inject(<span class="params">Number, <span class="string">&#x27;sub&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span>(<span class="params">n, num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Number(n.number - num)</span><br><span class="line"></span><br><span class="line">number = Number(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(number.sub(<span class="number">3</span>).sub(<span class="number">5</span>).number)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>有意思的数学函数 Python 代码</title>
    <url>/post/6f160740.html</url>
    <content><![CDATA[<p>一段 <code>Python</code> 代码，实现了数学函数的值计算和导数值计算，很有意思。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span>(<span class="params">items</span>):</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">        res = res * i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, value=<span class="number">0</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;add&quot;</span>, self, other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;mul&quot;</span>, self, other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__truediv__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;div&quot;</span>, self, other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__pow__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;pow&quot;</span>, self, other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;add&quot;</span>, self, wrapper_opt(<span class="string">&quot;mul&quot;</span>, Constant(-<span class="number">1</span>), other))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;add&quot;</span>, self, other, r=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rmul__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;mul&quot;</span>, self, other, r=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rtruediv__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;div&quot;</span>, self, other, r=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name == other.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.name)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constant</span>(<span class="params">Node</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(value, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">variable</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Variable</span>(<span class="params">Node</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> variable.name == self.name <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operator</span>(<span class="params">Node</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self.inputs = inputs</span><br><span class="line">        self.name = <span class="string">f&quot;Opt <span class="subst">&#123;name&#125;</span> of <span class="subst">&#123;inputs&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        opt2str = &#123;<span class="string">&quot;Add&quot;</span>: <span class="string">&quot;+&quot;</span>, <span class="string">&quot;Power&quot;</span>: <span class="string">&quot;^&quot;</span>, <span class="string">&quot;Multiply&quot;</span>: <span class="string">&quot;*&quot;</span>, <span class="string">&quot;Divide&quot;</span>: <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> opt2str[self.name.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]].join(<span class="built_in">map</span>(<span class="built_in">str</span>, self.inputs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span>(<span class="params">Operator</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(inputs, name=<span class="string">&quot;Add&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(inp.calculate() <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(inp.derivative(variable) <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Multiply</span>(<span class="params">Operator</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(inputs, name=<span class="string">&quot;Multiply&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> product(inp.calculate() <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(</span><br><span class="line">            inp.derivative(variable)</span><br><span class="line">            * product(</span><br><span class="line">                other_inp.calculate()</span><br><span class="line">                <span class="keyword">for</span> other_inp <span class="keyword">in</span> self.inputs</span><br><span class="line">                <span class="keyword">if</span> other_inp != inp</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Divide</span>(<span class="params">Operator</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(inputs, name=<span class="string">&quot;Divide&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        a, b = [inp.calculate() <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs]</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        a, b = [inp.calculate() <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs]</span><br><span class="line">        da, db = [inp.derivative(variable) <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs]</span><br><span class="line">        <span class="keyword">return</span> (da * b - db * a) / (b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>(<span class="params">Operator</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(inputs, name=<span class="string">&quot;Power&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        _x, n = self.inputs</span><br><span class="line">        n = n.value</span><br><span class="line">        <span class="keyword">return</span> _x.calculate() ** n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        _x, n = self.inputs</span><br><span class="line">        n = n.value</span><br><span class="line">        <span class="keyword">return</span> n * (_x.calculate() ** (n - <span class="number">1</span>)) * _x.derivative(variable)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper_opt</span>(<span class="params">opt, self, other, r=<span class="literal">False</span></span>):</span></span><br><span class="line">    opt2class = &#123;<span class="string">&quot;add&quot;</span>: Add, <span class="string">&quot;mul&quot;</span>: Multiply, <span class="string">&quot;pow&quot;</span>: Power, <span class="string">&quot;div&quot;</span>: Divide&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(other, Node):</span><br><span class="line">        other = Constant(other)</span><br><span class="line">    inputs = [other, self] <span class="keyword">if</span> r <span class="keyword">else</span> [self, other]</span><br><span class="line">    node = opt2class[opt](inputs=inputs)</span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure>

<p>这段代码很有意思，它实现了常规数学上的函数表示。并且还能计算当前的函数值和计算对应变量的导数值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = Variable(<span class="string">&quot;x&quot;</span>, <span class="number">2</span>)        <span class="comment"># 定义变量 x 默认值 2</span></span><br><span class="line">y = Variable(<span class="string">&quot;y&quot;</span>, <span class="number">3</span>)        <span class="comment"># 定义变量 y 默认值 3</span></span><br><span class="line">f = <span class="number">3</span> * x ** <span class="number">2</span> + <span class="number">4</span> * y - <span class="number">5</span>  <span class="comment"># 定义函数 f(x)=3x²+4y−5</span></span><br><span class="line"><span class="built_in">print</span>(f)                    <span class="comment"># 3*x^2+4*y+-1*5</span></span><br><span class="line"><span class="built_in">print</span>(f.calculate())        <span class="comment"># 19    根据默认值 x=2 y=3 计算 f(x)</span></span><br><span class="line"><span class="built_in">print</span>(f.derivative(x))      <span class="comment"># 12    根据默认值 x=2 计算 f&#x27;(x)=6x</span></span><br><span class="line">x.value = <span class="number">3</span>                 <span class="comment"># x=3</span></span><br><span class="line">y.value = -<span class="number">5</span>                <span class="comment"># y=-5</span></span><br><span class="line"><span class="built_in">print</span>(f.calculate())        <span class="comment"># 2     根据默认值 x=3 y=-5 计算 f(x)</span></span><br><span class="line"><span class="built_in">print</span>(f.derivative(y))      <span class="comment"># 4     根据默认值 y=4 计算 f 对 y 求导 =4</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
